<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:40:51 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-82/HBASE-82.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-82] row keys should be array of bytes</title>
                <link>https://issues.apache.org/jira/browse/HBASE-82</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;I have heard from several people that row keys in HBase should be less restricted than hadoop.io.Text.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;

&lt;p&gt;At the very least, a row key has to be a WritableComparable. This would lead to the most general case being either hadoop.io.BytesWritable or hbase.io.ImmutableBytesWritable. The primary difference between these two classes is that hadoop.io.BytesWritable by default allocates 100 bytes and if you do not pay attention to the length, (BytesWritable.getSize()), converting a String to a BytesWritable and vice versa can become problematic. &lt;/p&gt;

&lt;p&gt;hbase.io.ImmutableBytesWritable, in contrast only allocates as many bytes as you pass in and then does not allow the size to be changed.&lt;/p&gt;

&lt;p&gt;If we were to change from Text to a non-text key, my preference would be for ImmutableBytesWritable, because it has a fixed size once set, and operations like get, etc do not have to something like System.arrayCopy where you specify the number of bytes to copy.&lt;/p&gt;

&lt;p&gt;Your comments, questions are welcome on this issue. If we receive enough feedback that Text is too restrictive, we are willing to change it, but we need to hear what would be the most useful thing to change it to as well.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12383774">HBASE-82</key>
            <summary>row keys should be array of bytes</summary>
                <type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="stack">stack</assignee>
                                    <reporter username="jimk">Jim Kellerman</reporter>
                        <labels>
                    </labels>
                <created>Mon, 3 Dec 2007 08:12:02 +0000</created>
                <updated>Fri, 22 Aug 2008 21:13:06 +0000</updated>
                            <resolved>Thu, 15 May 2008 22:13:02 +0000</resolved>
                                                    <fixVersion>0.2.0</fixVersion>
                                        <due></due>
                            <votes>1</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12549167" author="kbeyer" created="Thu, 6 Dec 2007 20:12:12 +0000"  >&lt;p&gt;Would it be difficult to allow the user to declare a WritableComparable class for the key when creating a table?   I think we should be able to get enough performance and gain considerable flexibility. The default could be Text or BytesWritable, or whatever you choose. For jaql, I would really like to use my own WritableComparable as the key.&lt;/p&gt;</comment>
                            <comment id="12549217" author="jimk" created="Thu, 6 Dec 2007 22:27:27 +0000"  >&lt;p&gt;Kevin Beyer - 06/Dec/07 12:12 PM&lt;br/&gt;
&amp;gt; Would it be difficult to allow the user to declare a WritableComparable class for the key when creating a table?&lt;br/&gt;
&amp;gt; I think we should be able to get enough performance and gain considerable flexibility. The default could be&lt;br/&gt;
&amp;gt;Text or BytesWritable, or whatever you choose. For jaql, I would really like to use my own WritableComparable&lt;br/&gt;
&amp;gt; as the key.&lt;/p&gt;

&lt;p&gt;What I was proposing as the row key was WritableComparable. Thus (for example) the following APIs:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] get(Text row, Text column) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] get(Text row, Text column) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; HScannerInterface obtainScanner(Text[] columns, Text startRow)  &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;would become:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] get(WritableComparable row, Text column) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] get(WritableComparable row, Text column) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; HScannerInterface obtainScanner(Text[] columns, WritableComparable startRow)  &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Do you want to tie row keys to be a specific kind of WritableComparable, or would this work for you?&lt;/p&gt;</comment>
                            <comment id="12549246" author="kbeyer" created="Fri, 7 Dec 2007 00:09:23 +0000"  >&lt;p&gt;&amp;gt; Do you want to tie row keys to be a specific kind of WritableComparable, or would this work for you?&lt;/p&gt;

&lt;p&gt;This works for me.  I was confused by the discussion on ImmutableBytesWritable.&lt;/p&gt;

&lt;p&gt;Though I don&apos;t require it, does it make sense to follow the use of generics in map/reduce?&lt;/p&gt;

&lt;p&gt;class HTable&amp;lt;K extends WritableComparable&amp;gt;&lt;/p&gt;
{
   ...
  public byte[] get(K row, Text column) throws IOException
  public HScannerInterface&amp;lt;K&amp;gt; obtainScanner(Text[] columns, K startRow)  throws IOException
}</comment>
                            <comment id="12549265" author="jimk" created="Fri, 7 Dec 2007 00:57:00 +0000"  >&lt;p&gt;&amp;gt; class HTable&amp;lt;K extends WritableComparable&amp;gt;&lt;/p&gt;

&lt;p&gt;++1 Ooh I like it, will have to check to see if it works all the way through though.&lt;/p&gt;</comment>
                            <comment id="12556984" author="stack" created="Tue, 8 Jan 2008 19:18:44 +0000"  >&lt;p&gt;Chatting with Dave Simpson, to protect against different clients inserting rows of different types all into the one table producing an undefined sort order because of the hodge-podge of type comparators, the key type for a table should be defined as part of table creation with an illegal type exception thrown if a client tries an update with a non-matching type.&lt;/p&gt;</comment>
                            <comment id="12565228" author="bryanduxbury" created="Sun, 3 Feb 2008 21:36:37 +0000"  >&lt;p&gt;I think there are a number of reasons why this would end up being more trouble than it&apos;s worth. If we templatized HTable, we&apos;d have to make sure that the class you templatized with would be available to the Master and RegionServers as well as the client. This means you&apos;d essentially need to make a custom build of HBase to use the templatized version of HTable. &lt;/p&gt;

&lt;p&gt;Also, the additional typecheck at every put/get/etc. would add a bunch of overhead. HBase isn&apos;t exactly the fastest product to start with, so this additional hit might be pretty negative. &lt;/p&gt;

&lt;p&gt;To top it all off, I&apos;m not convinced that it&apos;s really that useful. What kind of things do you need as keys that can&apos;t be serialized into Texts?&lt;/p&gt;</comment>
                            <comment id="12568402" author="bryanduxbury" created="Wed, 13 Feb 2008 01:51:20 +0000"  >&lt;p&gt;Nobody has really indicated that this issue has merits that outweigh its difficulties. Resolving wontfix.&lt;/p&gt;</comment>
                            <comment id="12569132" author="kbeyer" created="Thu, 14 Feb 2008 23:22:55 +0000"  >&lt;p&gt;Using Text is not a very good solution.  I don&apos;t mind avoiding generics, but the interface should be using a Writable (or WritableComparable) in place of Text, and it should allow me to specify a comparator.  I don&apos;t see why the hbase key code should not be as general as the MapReduce key, and it is limiting for our use in jaql.&lt;/p&gt;

&lt;p&gt;For jaql, I would like to use any type, and even a complex type as the key.  My WritableComparable would work there.&lt;/p&gt;

&lt;p&gt;Others may want to create a table that has a custom collation on a text key.  For example, case insensitivity, or in German, ss and esset are equivalent.&lt;/p&gt;

&lt;p&gt;Serializing everything into text is not a great solution.  Mapping arbitrary comparators into some text string is nontrivial and often causes an increase in storage to create the key as well as the original form of the key (eg, key = data.toUpperCase(), so data needs to be stored too).&lt;/p&gt;

&lt;p&gt;I would like to see this issue reopened.  It&apos;s probably not the top priority for hbase, but I think it should be fixed before the uptake of hbase causes makes it a painful changed later.&lt;/p&gt;

&lt;p&gt;If you are really only going to support one specific type for the key, why not use byte arrays instead?  They are faster than text and easier to understand the comparison method.&lt;/p&gt;</comment>
                            <comment id="12569139" author="bryanduxbury" created="Thu, 14 Feb 2008 23:59:18 +0000"  >&lt;p&gt;Specifying a comparator would cause just as much difficulty as making the HTables generic in the first place. This is because region servers would have to have the comparator code on hand in order to produce proper orderings in mapfiles and on gets and puts. Correct me if I&apos;m wrong, but this would also require code distribution and restarting of HBase. &lt;/p&gt;

&lt;p&gt;I envisioned HBase as a long-running process, which means that restarting it to use a different key or comparator would be somewhat cumbersome. If there&apos;s a way to distribute new code to servers at runtime, it&apos;d be a different story.&lt;/p&gt;

&lt;p&gt;Can you give some examples of complex types that would be used as keys in jaql?&lt;/p&gt;</comment>
                            <comment id="12569241" author="jimk" created="Fri, 15 Feb 2008 11:36:19 +0000"  >&lt;p&gt;Reopening issue. Some valid points have been made for its utility.&lt;/p&gt;</comment>
                            <comment id="12569252" author="jimk" created="Fri, 15 Feb 2008 12:33:01 +0000"  >&lt;p&gt;I&apos;ve been doing some thinking about this and would like to address some arguments that have been made both for and against this change:&lt;/p&gt;

&lt;p&gt;With respect to custom WritableComparables and Comparators;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It would not be too hard to get custom code to the servers. It just means that the custom code has to be distributed to every node running HBase and the classpath has to be adjusted. This is also a requirement for using custom classes in Map/Reduce, so people are already familiar with doing this.&lt;/li&gt;
	&lt;li&gt;However, having said that, I do agree that serialization and deserialization of custom classes is much more expensive than for a restricted set of &quot;known&quot; classes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With respect to using byte arrays as keys:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;This is appealing to me. Serialization and deserialization are easy and fast as is comparison. It would be easy to extend ImmutableBytesWritable to implement Comparable.&lt;/li&gt;
	&lt;li&gt;BerkeleyDB uses byte arrays as keys and values and allows either to be up to 4GB (unsigned int) in length. We could live with the 2GB limit that Java&apos;s signed int imposes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The biggest downside to changing keys from Text to anything else is migration. However:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;We do have a migration framework in place.&lt;/li&gt;
	&lt;li&gt;If we are going to make this change it would be better to do it sooner rather than later before users have hundreds of GB of data stored in HBase.&lt;/li&gt;
	&lt;li&gt;It is easy to convert between Text and byte
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    bytes[] b = something
    Text t = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Text(b)
    bytes[] b = t.getBytes();
    t.set(b);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12569253" author="jimk" created="Fri, 15 Feb 2008 12:36:50 +0000"  >&lt;p&gt;Change priority to major since if we are going to do this it needs to be done sooner rather than later.&lt;/p&gt;</comment>
                            <comment id="12569335" author="stack" created="Fri, 15 Feb 2008 17:36:24 +0000"  >&lt;p&gt;Couple of comments:&lt;/p&gt;

&lt;p&gt;+ Extending comment 08/Jan/08 11:18 AM above (how to prevent user entering different key types), since columns have no types in hbase and column family is the lowest level of granularity on which we can set attributes, this would imply that the key type would need to be an attribute of column family.  An attempt at adding a key that was of a different type should throw an exception (As MR input types do)?&lt;br/&gt;
+ I like byte arrays for keys.  Aligns w/ a notion I have that hbase should be as dumb as possible, but no dumber &amp;#8211; as Einstein said once?  I like the reminder that this is how bdb does it.  Would it work?  For jaql?  Client-side, they&apos;d pass a byte array for row key.   Internally we&apos;d just be be doing byte compares (Though I think thats all we&apos;re currently doing with our Text keys).&lt;br/&gt;
+ ImmutableByteArray is already a WritableCompable&lt;/p&gt;</comment>
                            <comment id="12569345" author="bryanduxbury" created="Fri, 15 Feb 2008 17:56:35 +0000"  >&lt;p&gt;I understand that distributing new code is part of MapReduce, but that makes a lot of sense, because MapReduce is a job-oriented, limited-lifetime process. When it ends, you push out new code. HBase, on the other hand, should be a long-running process, which makes service interruptions to add new key types costly, especially if it&apos;s being used by multiple applications. &lt;/p&gt;

&lt;p&gt;I agree that byte arrays as keys is acceptable. What&apos;s the big difference between Text and a byte array as it is? Just additional logic in the Text class? If we switch to using byte arrays as keys, we should be prepared to offer convenience overloaded methods to take String or Text keys which get converted before being sent over the wire. &lt;/p&gt;

&lt;p&gt;If we change keys from Text to byte[], will we also change column family names and qualifiers in the same way?&lt;/p&gt;</comment>
                            <comment id="12569357" author="jimk" created="Fri, 15 Feb 2008 18:35:47 +0000"  >&lt;p&gt;&amp;gt; Bryan Duxbury - 15/Feb/08 09:56 AM&lt;br/&gt;
&amp;gt; I understand that distributing new code is part of MapReduce, but that makes a lot of sense,&lt;br/&gt;
&amp;gt; because MapReduce is a job-oriented, limited-lifetime process. When it ends, you push out&lt;br/&gt;
&amp;gt; new code. HBase, on the other hand, should be a long-running process, which makes service&lt;br/&gt;
&amp;gt; interruptions to add new key types costly, especially if it&apos;s being used by multiple applications.&lt;/p&gt;

&lt;p&gt;I agree. I just wanted to present some pros and cons for generic WritableComparable. In my&lt;br/&gt;
opinion, the cons outweigh the pros.&lt;/p&gt;

&lt;p&gt;&amp;gt; I agree that byte arrays as keys is acceptable. What&apos;s the big difference between Text and a byte&lt;br/&gt;
&amp;gt; array as it is? Just additional logic in the Text class?&lt;/p&gt;

&lt;p&gt;Mostly. Text isn&apos;t very fussy about what you put into it, and it just serializes bytes. But there is&lt;br/&gt;
kind of an expectation that it contains UTF-8 text.&lt;/p&gt;

&lt;p&gt;&amp;gt; If we switch to using byte arrays as keys, we should be prepared to offer convenience overloaded&lt;br/&gt;
&amp;gt; methods to take String or Text keys which get converted before being sent over the wire.&lt;/p&gt;

&lt;p&gt;Yes.&lt;/p&gt;

&lt;p&gt;&amp;gt; If we change keys from Text to byte[], will we also change column family names and qualifiers&lt;br/&gt;
&amp;gt; in the same way?&lt;/p&gt;

&lt;p&gt;No, I don&apos;t think so. There are good reasons for keeping the schema as readable text.&lt;/p&gt;</comment>
                            <comment id="12569401" author="kbeyer" created="Fri, 15 Feb 2008 20:34:13 +0000"  >&lt;p&gt;JK&amp;gt; BerkeleyDB uses byte arrays as keys and values&lt;/p&gt;

&lt;p&gt;If I recall correctly, BerkeleyDB also allows a comparator to be passed.  I&apos;m ok with a byte array as the key with a comparator passed in.  Map/reduce internally uses such an api during the sort, to avoid unpacking and then comparing.  I would want to use the same comparator classes that map/reduce uses.&lt;/p&gt;

&lt;p&gt;BD&amp;gt; This is because region servers would have to have the comparator code on hand in order to produce proper orderings in mapfiles and on gets and puts. Correct me if I&apos;m wrong, but this would also require code distribution and restarting of HBase.&lt;/p&gt;

&lt;p&gt;It is possible to dynamically add more code to a running java process.  It is done inside DB2 for user-defined functions, for example.  It&apos;s not terribly difficult; the distribution is slightly more painful.  If dfs were an installable file-system (as multiple people have prototyped with libFUSE), then distribution is easily done by dfs.&lt;/p&gt;

&lt;p&gt;Moreover, type dynamic code loading problem has to be solved to make Filters useful, and Filters are much more dynamic than key types/comparators.&lt;/p&gt;

&lt;p&gt;BD&amp;gt; Can you give some examples of complex types that would be used as keys in jaql?&lt;/p&gt;

&lt;p&gt;Jaql supports an extended JSON data model.  For example, (almost) any JSON value can be used as a map/reduce key, join key, group-by key, or sort key.  For example, a (string,int)-pair like &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;quot;astring&amp;quot;,17&amp;#93;&lt;/span&gt; can be a key.  Jaql even allows mixed types in these comparisons (by an arbitrary ordering of the types), which is useful for some applications that put different types of things in the same bag (eg, departments and employees).&lt;/p&gt;</comment>
                            <comment id="12569468" author="stack" created="Sat, 16 Feb 2008 00:41:49 +0000"  >&lt;p&gt;Kevin Beyer&amp;gt; If I recall correctly, BerkeleyDB also allows a comparator to be passed.&lt;/p&gt;

&lt;p&gt;Yeah. You can set the comparator for the database in bdb.  Default is byte comparisons.  In our case, I suppose you&apos;d set the comparator at the column family level; a single Comparator would be used across the whole Store.  The classname could be an attribute of column family.  Presuming we added to hbase some kinda network classloader or a classloader that could read from an hdfs directory, and as Kevin suggests, Filters would also benefit if we had such a mechanism in place, then each Store could instantiate its own Comparator instance.  Presumption again is that client is consistent about the Type bytes inserted into the column family.  Otherwise, sort order will be wonky.  Do folks think it OK that there&apos;d be no checks in place to prevent clients inserting bytes from different key types?  I suppose there is nothing we can do about it if keys are byte arrays.  Would this work for jaql Kevin?&lt;/p&gt;

&lt;p&gt;I&apos;d prefer this approach of byte keys plus optional comparator to the alternative where we set the allowed WritableComparable key type on the Store and each key&apos;s type was checked to see that it matches the advertised type (Another downside to this alternative would require our undoing HBaseRPC putting back the generic hadoop RPC because we could be passing keys of any WritableComparable type).&lt;/p&gt;
</comment>
                            <comment id="12570082" author="kbeyer" created="Tue, 19 Feb 2008 02:39:46 +0000"  >&lt;p&gt;Yes, bytes + comparator would work fine for jaql.  Preferably, it would be the same comparators that are already used by the sort code, which work on serialized bytes (but also on WritableComparables, so that might be a problem).  If these comparators are inconsistent, then the sort in map/reduce will not work properly.  I think it is ok to document the transitivity requirement, but I don&apos;t see how you can enforce it in any way.  Different key types are fine, as long as the comparator knows how to handle them.  If you can&apos;t reuse the same comparator interface, I can always implement my comparisons in another place, but I already have two of them (one in the WritableComparable, and one in the Comparator).&lt;/p&gt;

&lt;p&gt;I don&apos;t see how column families and the key comparator are related, except that they are both table-level metadata. Yes, I agree that a single comparator would be used for the entire table.&lt;/p&gt;</comment>
                            <comment id="12570357" author="stack" created="Tue, 19 Feb 2008 18:30:45 +0000"  >&lt;p&gt;Are you referring to BasicTypeSorterBase Kevin?  I see compares of WritableComparables but not of byte arrays (Unless you are talking of the inner Comparator class)?  Mind supplying a pointer to where bytes are compared?&lt;/p&gt;

&lt;p&gt;A comparator that does byte arrays will be pretty slow thinking on it; wouldn&apos;t you have to create instances of the classes you want to compare on each invocation of the compare?  Would that work for jaql?  This seems to be how bdbje would do it.   The objects it passes to Comparator.compare are two byte arrays.  Then, &quot;If you know how your data is organized in the byte  array, then you can write a comparison routine that directly examines the contents of the arrays. Otherwise, you have to reconstruct your original objects, and then perform the comparison. &quot;).&lt;/p&gt;
</comment>
                            <comment id="12570531" author="kbeyer" created="Wed, 20 Feb 2008 01:35:39 +0000"  >&lt;p&gt;I&apos;m referring to org.apache.hadoop.io.WritableComparator which has these methods:&lt;/p&gt;

&lt;p&gt;  /** Optimization hook.  Override this to make SequenceFile.Sorter&apos;s scream.&lt;br/&gt;
   *&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;The default implementation reads the data into two 
{@link
   * WritableComparable}
&lt;p&gt;s (using &lt;/p&gt;
{@link
   * Writable#readFields(DataInput)}
&lt;p&gt;, then calls &lt;/p&gt;
{@link
   * #compare(WritableComparable,WritableComparable)}
&lt;p&gt;.&lt;br/&gt;
   */&lt;br/&gt;
  public int compare(byte[] b1, int s1, int l1, byte[] b2, int s2, int l2) {&lt;br/&gt;
    try &lt;/p&gt;
{
      buffer.reset(b1, s1, l1);                   // parse key1
      key1.readFields(buffer);
      
      buffer.reset(b2, s2, l2);                   // parse key2
      key2.readFields(buffer);
      
    }
&lt;p&gt; catch (IOException e) &lt;/p&gt;
{
      throw new RuntimeException(e);
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    return compare(key1, key2);                   // compare them&lt;br/&gt;
  }&lt;/p&gt;

&lt;p&gt;  /** Compare two WritableComparables.&lt;br/&gt;
   *&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&amp;lt;p&amp;gt; The default implementation uses the natural ordering, calling 
{@link
   * Comparable#compareTo(Object)}
&lt;p&gt;. */&lt;br/&gt;
  @SuppressWarnings(&quot;unchecked&quot;)&lt;br/&gt;
  public int compare(WritableComparable a, WritableComparable b) &lt;/p&gt;
{
    return a.compareTo(b);
  }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The default is to deserialize and call the compare method on the WritableComparable,  but many WritableComparable supply their own WritableComparator to improve sort performance.&lt;/p&gt;</comment>
                            <comment id="12591835" author="jimk" created="Wed, 23 Apr 2008 22:30:12 +0000"  >&lt;p&gt;As this is an API change, it should go into 0.2.0&lt;/p&gt;</comment>
                            <comment id="12591854" author="stack" created="Wed, 23 Apr 2008 22:53:05 +0000"  >&lt;p&gt;Do this for 0.2.0 as part of our effort at making server bytes only at least when it comes to key/values.&lt;/p&gt;</comment>
                            <comment id="12591866" author="jimk" created="Wed, 23 Apr 2008 23:21:09 +0000"  >&lt;p&gt;The Comparator should be specified at table creation, no? If you changed comparators after data had been stored, that could make rows sort differently, which would really mess things up.&lt;/p&gt;</comment>
                            <comment id="12591867" author="jimk" created="Wed, 23 Apr 2008 23:24:11 +0000"  >&lt;p&gt;If the comparator is specified at table creation time, it should be attached to the HTableDescriptor. In that case, getting HTableDescriptor out of HRegionInfo would be critical.&lt;/p&gt;</comment>
                            <comment id="12591868" author="jimk" created="Wed, 23 Apr 2008 23:25:50 +0000"  >&lt;p&gt;We can&apos;t really get Text out of the servers until we change row keys to byte[]&lt;/p&gt;</comment>
                            <comment id="12592110" author="jimk" created="Thu, 24 Apr 2008 15:53:34 +0000"  >&lt;p&gt;Question: Would a class that implements org.apache.hadoop.io.RawComparator be acceptable? It has&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; compare(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] b1, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; s1, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; l1, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] b2, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; s2, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; l2);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;but not&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; compare(WritableComparable a, WritableComparable b)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;WritableComparator has a lot of extra baggage that I don&apos;t think we need to lug around.&lt;/p&gt;</comment>
                            <comment id="12592112" author="stack" created="Thu, 24 Apr 2008 15:58:59 +0000"  >&lt;p&gt;Yes.  Thats the idea.&lt;/p&gt;</comment>
                            <comment id="12592529" author="stack" created="Fri, 25 Apr 2008 23:36:27 +0000"  >&lt;p&gt;Profiling RPC during a PE sequentialWrite, I see about 10% of all CPU spent in the gap between Server$Handler.run and actual invocation of HRegionServer.batchUpdate.  Another 12% of RPC is spent in the Server$Listener, the bulk of which &amp;#8211; 7% &amp;#8211; is the Invocation.readFields reading in its data (Invocation is about reading off the wire the name of method to call and its params).  At least some of this could be in play messing w/ RPC but let that happen in another issue, post 0.2 release.  Let this issue be about just changing column and row to byte arrays.&lt;/p&gt;</comment>
                            <comment id="12592531" author="bryanduxbury" created="Fri, 25 Apr 2008 23:49:36 +0000"  >&lt;p&gt;If 7% of the time is spent managing Invocation.readFields, hardwiring the rpc (codes-&amp;gt;method mapping) would drop that to basically 0, wouldn&apos;t it? What part of that readFields call is slow, by the way? &lt;/p&gt;</comment>
                            <comment id="12592532" author="stack" created="Sat, 26 Apr 2008 00:09:14 +0000"  >&lt;p&gt;I don&apos;t think it that basic.  We still need to read in the arguments.  Longest times inside in the 7% are creation of new Writable instance ~2%, doing BatchUpdate readFields ~1%, Text.readString ~1%.  My guess is that hardwiring we could save about 10% &amp;#8211; maybe 20% at the outside.&lt;/p&gt;

&lt;p&gt;My takeaway though is that RPC messing requires more study, study to be done outside of this issue I&apos;d say.&lt;/p&gt;</comment>
                            <comment id="12593461" author="stack" created="Wed, 30 Apr 2008 22:58:01 +0000"  >&lt;p&gt;Not yet finished but attaching what I have to date&lt;/p&gt;</comment>
                            <comment id="12593496" author="stack" created="Thu, 1 May 2008 06:28:21 +0000"  >&lt;p&gt;Includes new Bytes class.  Removes RowMap.  Not used any more.&lt;/p&gt;</comment>
                            <comment id="12593674" author="stack" created="Thu, 1 May 2008 23:40:00 +0000"  >&lt;p&gt;This is all of src/java converted to byte arrays.  Working on tests now.&lt;/p&gt;</comment>
                            <comment id="12593721" author="stack" created="Fri, 2 May 2008 06:18:20 +0000"  >&lt;p&gt;Fixed up tests.  Now working on gettting it all to compile.&lt;/p&gt;</comment>
                            <comment id="12594036" author="stack" created="Sat, 3 May 2008 22:34:49 +0000"  >&lt;p&gt;I need to be able to use byte arrays as keys in Maps.  Byte arrays alone don&apos;t work as Map keys since byte [] &apos;Compare&apos; using object identity rather than byte content.  I need this functionality because rows and regionnames, etc., are byte arrays where before they were Comparable Text.   I could wrap the byte array into an ImmutableBytesWritable once the byte array arrives server-side and use this as Key since IBW is Comparable.  That&apos;d work.&lt;/p&gt;

&lt;p&gt;But, I took a look at using the hash of the byte array Integer as Map key.   For sure, if I use a simple hash of the byte array, as we would be doing if we used IBW &amp;#8211; See the WritableComparator.hashBytes which IBW (and Text) uses &amp;#8211; its faster especially if invocations are &amp;lt; 100k; its 3 to 4 times as fast.  At about 1M iterations, the difference is less.  Using the byte array hash Integer instead of IBW is only about 20% faster.  I guess that hot spot is what makes for the improvements but, for sure, its taking its time warming up.  Since I can make other savings &amp;#8211; e.g. get rid of the rowsToLocks Map &amp;#8211; I&apos;m going to go with using a hash code Integer as keys in the locksToRows Map.&lt;/p&gt;

&lt;p&gt;A Jenkins hash is more robust than the simple hash and its better suited to the types of keys we&apos;ll be seeing and better than CRCs, etc. &amp;#8211; see &lt;a href=&quot;http://www.ddj.com/184410284&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.ddj.com/184410284&lt;/a&gt; &amp;#8211;  but its more expensive to make.  In my testing, it was about same as IBW at 100k or less but at 1M, it took ~twice as long.&lt;/p&gt;

&lt;p&gt;I did various tests.  I&apos;ll attach the last code that I was using.  It was reading a file of 750k unique-ish URLs and hashing these.  The code does HRegionServer.batchUpdate-like things inserting into a Map in case the hashCode-making is lazy (the put will force the hash code calculation).&lt;/p&gt;

&lt;p&gt;I also tried wrapping the byte array in a ByteBuffer.  This was about 20% slower and more than IBW.  I&apos;m guessing its hashing code more involved than that of WritableComparator.&lt;/p&gt;</comment>
                            <comment id="12594476" author="stack" created="Tue, 6 May 2008 05:57:30 +0000"  >&lt;p&gt;v5 is starting to pass unit tests.  Still a ways to go.&lt;/p&gt;</comment>
                            <comment id="12595435" author="stack" created="Fri, 9 May 2008 00:20:42 +0000"  >&lt;p&gt;Updated to head of TRUNK.  Most tests pass.  Working on the last few.&lt;/p&gt;</comment>
                            <comment id="12595954" author="stack" created="Mon, 12 May 2008 00:07:14 +0000"  >&lt;p&gt;Just the mapred tests to do.&lt;/p&gt;</comment>
                            <comment id="12596244" author="stack" created="Tue, 13 May 2008 00:55:11 +0000"  >&lt;p&gt;This patch passes all tests.&lt;/p&gt;

&lt;p&gt;Patch does not include white space changes.&lt;/p&gt;

&lt;p&gt;Below is commit comment for tests.  Rest to follow.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Change hbase so serverside is &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays instead of Text objects.
Rows and Columns are now &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.

Made it so client-side, the HBaseAdmin and HTable can take &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [], Text
or &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; most tasks; e.g. opening table, creating a descriptor,
starting a batch update, etc.

Serverside, where Maps and Sets have &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; keys, we use
TreeMap and TreeSet because can specify comparator (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] by &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;
does identity comparison rather than content comparison).

Serverside, use &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Bytes class to &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; toString and to get &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;
bytes.

M  src/test/org/apache/hadoop/hbase/TestBloomFilters.java
M  src/test/org/apache/hadoop/hbase/TestMasterAdmin.java
M  src/test/org/apache/hadoop/hbase/TestInfoServers.java
M  src/test/org/apache/hadoop/hbase/TestRegionRebalancing.java
M  src/test/org/apache/hadoop/hbase/HBaseTestCase.java
M  src/test/org/apache/hadoop/hbase/AbstractMergeTestBase.java
M  src/test/org/apache/hadoop/hbase/HBaseClusterTestCase.java
M  src/test/org/apache/hadoop/hbase/TestEmptyMetaInfo.java
M  src/test/org/apache/hadoop/hbase/TestMergeMeta.java
M  src/test/org/apache/hadoop/hbase/TestHBaseCluster.java
M  src/test/org/apache/hadoop/hbase/TestCompare.java
M  src/test/org/apache/hadoop/hbase/TestTable.java
M  src/test/org/apache/hadoop/hbase/regionserver/TestGet2.java
M  src/test/org/apache/hadoop/hbase/regionserver/TestTimestamp.java
M  src/test/org/apache/hadoop/hbase/regionserver/TestDeleteFamily.java
M  src/test/org/apache/hadoop/hbase/regionserver/TestHStoreFile.java
M  src/test/org/apache/hadoop/hbase/regionserver/TestRegionServerExit.java
M  src/test/org/apache/hadoop/hbase/regionserver/TestLogRolling.java
M  src/test/org/apache/hadoop/hbase/regionserver/TestHMemcache.java
M  src/test/org/apache/hadoop/hbase/regionserver/TestGet.java
M  src/test/org/apache/hadoop/hbase/regionserver/TestHLog.java
M  src/test/org/apache/hadoop/hbase/regionserver/TestScanner.java
M  src/test/org/apache/hadoop/hbase/regionserver/OOMERegionServer.java
M  src/test/org/apache/hadoop/hbase/regionserver/TestDeleteAll.java
M  src/test/org/apache/hadoop/hbase/regionserver/TestHRegion.java
M  src/test/org/apache/hadoop/hbase/regionserver/TestSplit.java
M  src/test/org/apache/hadoop/hbase/regionserver/TestCompaction.java
M  src/test/org/apache/hadoop/hbase/TimestampTestBase.java
M  src/test/org/apache/hadoop/hbase/DisabledTestScanner2.java
M  src/test/org/apache/hadoop/hbase/filter/TestStopRowFilter.java
M  src/test/org/apache/hadoop/hbase/filter/TestRowFilterOnMultipleFamilies.java
M  src/test/org/apache/hadoop/hbase/filter/TestWhileMatchRowFilter.java
M  src/test/org/apache/hadoop/hbase/filter/TestInclusiveStopRowFilter.java
M  src/test/org/apache/hadoop/hbase/filter/TestRegExpRowFilter.java
M  src/test/org/apache/hadoop/hbase/TestToString.java
M  src/test/org/apache/hadoop/hbase/filter/TestRowFilterSet.java
M  src/test/org/apache/hadoop/hbase/filter/TestPageRowFilter.java
M  src/test/org/apache/hadoop/hbase/filter/TestRowFilterAfterWrite.java
M  src/test/org/apache/hadoop/hbase/MultiRegionTable.java
M  src/test/org/apache/hadoop/hbase/TestScannerAPI.java
M  src/test/org/apache/hadoop/hbase/MapFilePerformanceEvaluation.java
M  src/test/org/apache/hadoop/hbase/mapred/TestTableMapReduce.java
M  src/test/org/apache/hadoop/hbase/mapred/TestTableIndex.java
M  src/test/org/apache/hadoop/hbase/PerformanceEvaluation.java
M  src/test/org/apache/hadoop/hbase/util/TestMergeTool.java
M  src/test/org/apache/hadoop/hbase/client/TestHTable.java
M  src/test/org/apache/hadoop/hbase/client/TestTimestamp.java
M  src/test/org/apache/hadoop/hbase/client/TestBatchUpdate.java
M  src/test/org/apache/hadoop/hbase/client/TestListTables.java
    Purge Text.  Replace with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.
M  src/test/org/apache/hadoop/hbase/TestSerialization.java
    Add some &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; serialization tests &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; table descriptor, regioninfo,
    and &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; row result.  Convert from Text to &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; []
A src/test/org/apache/hadoop/hbase/regionserver/TestHRegionInfo.java
    Test of hregion info equality.
M  src/test/org/apache/hadoop/hbase/MiniHBaseCluster.java
    API &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; getOnlineRegions changed.  Only returns values.
D  src/test/org/apache/hadoop/hbase/hql/TestHQL.java
    Removed.  Don&apos;t want to fix it.
M  src/test/org/apache/hadoop/hbase/io/TestHbaseObjectWritable.java
    Add test of arrays.
D  src/test/org/apache/hadoop/hbase/io/TestTextSequence.java
    Removed.  TextSequence has been remvoed.
M  src/test/hbase-site.xml
    Default sort size is 100MB.  Means tests allocate 100MB buffer.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12596245" author="stack" created="Tue, 13 May 2008 00:55:30 +0000"  >&lt;p&gt;Try and get a review.&lt;/p&gt;</comment>
                            <comment id="12596281" author="stack" created="Tue, 13 May 2008 05:29:59 +0000"  >&lt;p&gt;Here are more commit comments.  Above was for test changes.  Below is for about half of the code changes.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
M  src/java/org/apache/hadoop/hbase/HColumnDescriptor.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays. 
    Set the defaults into data members.
    Add constructors that take Text and &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;. 
    Auto-migrate older versions.
    (stripColon, isLegalFamilyName): Added.
M  src/java/org/apache/hadoop/hbase/HMerge.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays. 
M  src/java/org/apache/hadoop/hbase/HStoreKey.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays. 
    Allow passing of Text or &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; as well as &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; row and column. 
    When you ask &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; qualifier or family, it returns &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] with the
    asked &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; column portion.
M  src/java/org/apache/hadoop/hbase/HConstants.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays. 
    Added some constants and capitalized root and meta regions.
M  src/java/org/apache/hadoop/hbase/thrift/ThriftServer.java
M  src/java/org/apache/hadoop/hbase/thrift/ThriftUtilities.java
M  src/java/org/apache/hadoop/hbase/regionserver/HLogEdit.java
M  src/java/org/apache/hadoop/hbase/regionserver/HLogKey.java
M  src/java/org/apache/hadoop/hbase/regionserver/Memcache.java
M  src/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java
M  src/java/org/apache/hadoop/hbase/regionserver/HStoreScanner.java
M  src/java/org/apache/hadoop/hbase/regionserver/HAbstractScanner.java
M  src/java/org/apache/hadoop/hbase/regionserver/InternalScanner.java
M  src/java/org/apache/hadoop/hbase/regionserver/HLog.java
M  src/java/org/apache/hadoop/hbase/regionserver/CompactSplitThread.java
M  src/java/org/apache/hadoop/hbase/regionserver/RegionUnavailableListener.java
M  src/java/org/apache/hadoop/hbase/&lt;span class=&quot;code-keyword&quot;&gt;rest&lt;/span&gt;/TableHandler.java
M  src/java/org/apache/hadoop/hbase/&lt;span class=&quot;code-keyword&quot;&gt;rest&lt;/span&gt;/ScannerHandler.java
M  src/java/org/apache/hadoop/hbase/&lt;span class=&quot;code-keyword&quot;&gt;rest&lt;/span&gt;/GenericHandler.java
M  src/java/org/apache/hadoop/hbase/LocalHBaseCluster.java
M  src/java/org/apache/hadoop/hbase/hql/DeleteCommand.java
M  src/java/org/apache/hadoop/hbase/hql/CreateCommand.java
M  src/java/org/apache/hadoop/hbase/hql/InsertCommand.java
M  src/java/org/apache/hadoop/hbase/hql/AlterCommand.java
M  src/java/org/apache/hadoop/hbase/hql/SelectCommand.java
M  src/java/org/apache/hadoop/hbase/hql/SchemaModificationCommand.java
M  src/java/org/apache/hadoop/hbase/hql/TruncateCommand.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays. 
M  src/java/org/apache/hadoop/hbase/regionserver/HStoreFile.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays. 
    Encoded name is now an &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;. 
    (createHStoreFilename): Moved common file creating code here.
    (getFamilySubDir): Added.
M  src/java/org/apache/hadoop/hbase/regionserver/HStore.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays. 
    Changed timesSeen so it starts over at 0 instead of at 1.
M  src/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays. 
    Changed logging of messages so logs the way master does reporting
    the message type using HMsg.toString().
    Changed key &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; maps like onlineRegions so instead of region name,
    instead its the hash of the name &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; array.
    (getOnlineRegions) Returns Collection instead of Map. 
M  src/java/org/apache/hadoop/hbase/regionserver/HRegion.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays. 
    Removed rows to locks.  Insteads, just have locks to rows and have
    the key made of the row hash.
M  src/java/org/apache/hadoop/hbase/HTableDescriptor.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays. 
    Give &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; values to data members.  Allow constructors take
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; or Text and &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays. 
    Changed the check on table name so user tables can&apos;t have a dot in them.
    (isLegalTableName): Added.
    (getNameAsString): Added.
M  src/java/org/apache/hadoop/hbase/filter/WhileMatchRowFilter.java
M  src/java/org/apache/hadoop/hbase/filter/StopRowFilter.java
M  src/java/org/apache/hadoop/hbase/filter/InclusiveStopRowFilter.java
M  src/java/org/apache/hadoop/hbase/filter/RegExpRowFilter.java
M  src/java/org/apache/hadoop/hbase/filter/RowFilterSet.java
M  src/java/org/apache/hadoop/hbase/filter/PageRowFilter.java
M  src/java/org/apache/hadoop/hbase/filter/RowFilterInterface.java
M  src/java/org/apache/hadoop/hbase/master/MetaScanner.java
M  src/java/org/apache/hadoop/hbase/master/ProcessServerShutdown.java
M  src/java/org/apache/hadoop/hbase/master/ServerManager.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.
M  src/java/org/apache/hadoop/hbase/HRegionInfo.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.
    Changed encoded name to &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; rather than &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;.
    Added constructors that take Text and &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;.
    (createRegionName): Added.
    (getRegionNameAsString): Added.
M  src/java/org/apache/hadoop/hbase/master/HMaster.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.
    (tableInCreation): Removed. Unused.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12596459" author="stack" created="Tue, 13 May 2008 17:19:24 +0000"  >&lt;p&gt;Here is the rest of the commit comment:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
M  src/java/org/apache/hadoop/hbase/master/ProcessRegionOpen.java
M  src/java/org/apache/hadoop/hbase/master/AddColumn.java
M  src/java/org/apache/hadoop/hbase/master/TableOperation.java
M  src/java/org/apache/hadoop/hbase/master/TableDelete.java
M  src/java/org/apache/hadoop/hbase/master/ColumnOperation.java
M  src/java/org/apache/hadoop/hbase/master/RegionManager.java
M  src/java/org/apache/hadoop/hbase/master/DeleteColumn.java
M  src/java/org/apache/hadoop/hbase/master/BaseScanner.java
M  src/java/org/apache/hadoop/hbase/master/ChangeTableState.java
M  src/java/org/apache/hadoop/hbase/master/MetaRegion.java
M  src/java/org/apache/hadoop/hbase/io/Cell.java
M  src/java/org/apache/hadoop/hbase/io/BatchOperation.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays. 
D  src/java/org/apache/hadoop/hbase/master/RowMap.java
    Removed.  Unused. 
M  src/java/org/apache/hadoop/hbase/master/ModifyColumn.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays. 
    Use &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; methods on Table Descriptor rather than manipulate 
    families directly.
M  src/java/org/apache/hadoop/hbase/master/ProcessRegionStatusChange.java
    Root region has been uppercased.  Remove Text.
M  src/java/org/apache/hadoop/hbase/master/RootScanner.java
    Root region name has been uppercased.
M  src/java/org/apache/hadoop/hbase/NotServingRegionException.java
    Add constructor that takes &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; array.
M  src/java/org/apache/hadoop/hbase/io/HbaseObjectWritable.java
    Handle &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays as well as Writables.  If a &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; array,
    &lt;span class=&quot;code-object&quot;&gt;short&lt;/span&gt;-circuit and dump it out on line rather than &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; recursion
    per element.
M  src/java/org/apache/hadoop/hbase/io/BatchUpdate.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; array.  Allow rows and columns be specified
    as &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; and Text
M  src/java/org/apache/hadoop/hbase/io/RowResult.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.  Added a toString.
M  src/java/org/apache/hadoop/hbase/io/HbaseMapWritable.java
    Keys are now &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays, exclusively.  Use MapWritable &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; you
    want to have Writable keys.  Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays. 
    Made it &lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt;.
D src/java/org/apache/hadoop/hbase/io/TextSequence.java
    No longer used.
M src/java/org/apache/hadoop/hbase/mapred/IdentityTableMap.java
M  src/java/org/apache/hadoop/hbase/mapred/GroupingTableMap.java
M  src/java/org/apache/hadoop/hbase/mapred/IndexOutputFormat.java
M  src/java/org/apache/hadoop/hbase/mapred/TableSplit.java
M  src/java/org/apache/hadoop/hbase/mapred/RowCounter.java
M src/java/org/apache/hadoop/hbase/mapred/IndexTableReduce.java
M src/java/org/apache/hadoop/hbase/mapred/TableReduce.java
M src/java/org/apache/hadoop/hbase/mapred/TableInputFormat.java
M  src/java/org/apache/hadoop/hbase/mapred/TableOutputFormat.java
M src/java/org/apache/hadoop/hbase/mapred/TableMap.java
M  src/java/org/apache/hadoop/hbase/mapred/IdentityTableReduce.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.  Uses ImmutableBytesWritable when
    needs to &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; Writable.
M src/java/org/apache/hadoop/hbase/mapred/TableInputFormatBase.java
    Replace Text with &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.  Uses ImmutableBytesWritable when
    needs to &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; Writable.  Add Apache license.
M  src/java/org/apache/hadoop/hbase/ipc/HMasterInterface.java
    Change Text to &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.  Up the version from 3 to 4. 
M  src/java/org/apache/hadoop/hbase/ipc/HMasterRegionInterface.java
    Up the version from 1 to 2. 
M src/java/org/apache/hadoop/hbase/ipc/HRegionInterface.java
    Change Text to &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.  Upped version from 2 to 3. 
M src/java/org/apache/hadoop/hbase/util/Merge.java
    Change Text to &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays. 
    (notInTable): New method. 
M  src/java/org/apache/hadoop/hbase/util/JenkinsHash.java
    Added javadoc.
A  src/java/org/apache/hadoop/hbase/util/Bytes.java
    Utility &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; manipulating &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.
M  src/java/org/apache/hadoop/hbase/util/MetaUtils.java
M  src/java/org/apache/hadoop/hbase/util/Migrate.java
    Change Text to &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.
M src/java/org/apache/hadoop/hbase/util/SoftSortedMap.java
    Allow keys of &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.
M  src/java/org/apache/hadoop/hbase/util/Writables.java
    Moved &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; array utility to &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Bytes class.
M  src/java/org/apache/hadoop/hbase/client/HTable.java
   Changed Text to &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.  Added overrides that take Text or &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;.
   Javadoc.
M  src/java/org/apache/hadoop/hbase/client/HConnectionManager.java
   Changed Text to &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.
   (isMetaTableName): Added
M src/java/org/apache/hadoop/hbase/client/HConnection.java
   Changed Text to &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.
M  src/java/org/apache/hadoop/hbase/client/RetriesExhaustedException.java
   Changed Text to &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays.
M  src/java/org/apache/hadoop/hbase/client/Scanner.java
    Removed unused imports.
M src/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
    Removed unused imports. Javadoc.
M src/java/org/apache/hadoop/hbase/HMsg.java
    Spacing.
M  src/webapps/regionserver/regionserver.jsp
M  src/webapps/master/master.jsp
    getOnlineRegions API changed.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12596544" author="stack" created="Tue, 13 May 2008 22:00:34 +0000"  >&lt;p&gt;This patch goes against TRUNK.  Ran it on PE up on cluster.&lt;/p&gt;</comment>
                            <comment id="12596652" author="stack" created="Wed, 14 May 2008 07:18:02 +0000"  >&lt;p&gt;Doing comparisons up on cluster, after this patch, things run roughly as they did before the patch is applied; we may run a little slower (depends on the comparison run).&lt;/p&gt;</comment>
                            <comment id="12596988" author="stack" created="Thu, 15 May 2008 01:19:01 +0000"  >&lt;p&gt;Updated to go against TRUNK.&lt;/p&gt;</comment>
                            <comment id="12597015" author="stack" created="Thu, 15 May 2008 06:03:17 +0000"  >&lt;p&gt;This issue removes TestSequence so 404 becomes obsolete when this issue gets committed.&lt;/p&gt;</comment>
                            <comment id="12597245" author="jimk" created="Thu, 15 May 2008 20:11:50 +0000"  >&lt;p&gt;Review comments:&lt;/p&gt;

&lt;p&gt;HColumnDescriptor&lt;/p&gt;

&lt;p&gt;Need to upgrade version number to 4 since 3 was used for column TTL&lt;/p&gt;

&lt;p&gt;HRegionInfo, HStoreKey&lt;/p&gt;

&lt;p&gt;How can you be certain that DELIMITER does not occur in some random byte in one of the names? Since we don&apos;t guard against it now, it is probably fine, but might want to do something about it in the future. Could cause invalid start/end keys. Might want to consider new format where each part of the region name is preceded by its length.&lt;/p&gt;

&lt;p&gt;HTableDescriptor.isLegalTableName documentation does not agree with implementation. Says it takes period, but code only allows letters, digits and underscore. Used to take minus as well.&lt;/p&gt;

&lt;p&gt;HConnectionManager, RegExpRowFilter, HbaseMapWritable: why change from HashMap to SortedMap? Is compareTo cheaper than computing hash? Not if map key is the computed hash of the byte array.&lt;/p&gt;

&lt;p&gt;Why use Bytes.getMapKey instead of Arrays.hashCode(byte[]) ? Couldn&apos;t a lot of Maps be converted to Sets and then couldn&apos;t you use HashSet?&lt;/p&gt;

&lt;p&gt;Why change HMasterRegionInterface.regionServerStartup from returning HbaseMapWritable to MapWritable?&lt;/p&gt;

&lt;p&gt;Migrate.java: no migration is required ???&lt;/p&gt;

&lt;p&gt;Bytes.SIZEOF_LONG Why not use Long.SIZE / Byte.SIZE ?&lt;/p&gt;</comment>
                            <comment id="12597277" author="stack" created="Thu, 15 May 2008 21:34:18 +0000"  >&lt;p&gt;Thanks for the review.&lt;/p&gt;

&lt;p&gt;On DELIMITER, regards HRI, we only parse the name in one place figuring the table name from region name.  Looking at how we compose region names, the parse is safe since it ranges over the table name portion which has been checked for legal characters.&lt;/p&gt;

&lt;p&gt;For HSK, parses start at the buffers&apos;s zeroth byte.  Passed buffers will be full column name or family name.  Family names are also checked to make sure they have legal characters &amp;#8211; i.e. non-DELIMITER characters.&lt;/p&gt;

&lt;p&gt;As best as I can tell, things are no worse than they were previously.&lt;/p&gt;

&lt;p&gt;On legal table name, I fixed the javadoc (and made it more clear that this is for user-space tables, not catalog tables).&lt;/p&gt;

&lt;p&gt;&amp;gt; HConnectionManager, RegExpRowFilter, HbaseMapWritable: why change from HashMap to SortedMap? Is compareTo cheaper than computing hash? Not if map key is the computed hash of the byte array.&lt;/p&gt;

&lt;p&gt;On why SortedMaps rather than HashMaps, its because you can&apos;t use byte arrays as keys in HashMaps; or, rather, the hashcode for a byte array is that of the Object so two different byte arrays will not equate, even though they might have same content (but I think you know this, or at least, if you didn&apos;t, you do after reviewing this patch).  I thought that I&apos;d gotten all places where I could get away with keeping HashMaps and using hash of byte array key as HashMap key but I missed the one in HConnectionManager.  I&apos;ll changed it back to HashMap with hash for of byte arrays for key (profiling yesterday, the lookup against this map of regions looking for cached regions on clientside takes 15% of all CPU doing writes &amp;#8211; most of time is in the SoftSortedMap &amp;#8211; this change should help a little).  RegExpRowFilter needs keys to be column names as does HbaseMapWritable (users of the latter want to get Map.Entry, etc. They&apos;d be baffled if instead of the key they entered, instead they got an integer.&lt;/p&gt;

&lt;p&gt;On Bytes.mapKey instead of Arrays.hashCode, the former does the boxing to Integer and uses the hashing mechanism that was in place before this patch &amp;#8211; the one Text used.  Any reason for using Arrays.hashcode instead?&lt;/p&gt;

&lt;p&gt;On Maps converted to Sets instead, i got a few of these already.  If you noticed any I missed, I&apos;d be interested.  I was certainly looking for opportunity (though, IIRC, Sets are often implemented atop Maps anyways so savings, if any, are minimal).&lt;/p&gt;

&lt;p&gt;On changing regionServerStartup, I needed to pass Configuration; keys of WritableComparable.  Rather than do convertions on both sides, it was simplier to just use MapWritable for this one time operation.&lt;/p&gt;

&lt;p&gt;There is another issue for managing any migrations associated with this issue.  This patch is big enough as it is.  Migration work will be easier with it committed.&lt;/p&gt;

&lt;p&gt;Thanks for the pointer to Byte.SIZE.  I changed Bytes.SIZEOF_LONG to do as you suggest.&lt;/p&gt;

&lt;p&gt;May I commit?&lt;/p&gt;</comment>
                            <comment id="12597282" author="jimk" created="Thu, 15 May 2008 21:45:01 +0000"  >&lt;p&gt;+1, please commit.&lt;/p&gt;</comment>
                            <comment id="12597296" author="stack" created="Thu, 15 May 2008 22:13:01 +0000"  >&lt;p&gt;Committed.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12385730">HBASE-76</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12387816">HBASE-404</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12391666">HBASE-522</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12393466">HBASE-570</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12381990" name="82-v12-ignore-ws.patch" size="724015" author="stack" created="Tue, 13 May 2008 22:00:34 +0000"/>
                            <attachment id="12382084" name="82-v13-ignore-ws.patch" size="734571" author="stack" created="Thu, 15 May 2008 01:19:01 +0000"/>
                            <attachment id="12381238" name="82-v2.patch" size="248192" author="stack" created="Thu, 1 May 2008 06:28:21 +0000"/>
                            <attachment id="12381286" name="82-v3.patch" size="362595" author="stack" created="Thu, 1 May 2008 23:40:00 +0000"/>
                            <attachment id="12381300" name="82-v4.patch" size="458698" author="stack" created="Fri, 2 May 2008 06:18:20 +0000"/>
                            <attachment id="12381479" name="82-v5.patch" size="625862" author="stack" created="Tue, 6 May 2008 05:57:30 +0000"/>
                            <attachment id="12381728" name="82-v7.patch" size="664192" author="stack" created="Fri, 9 May 2008 00:20:42 +0000"/>
                            <attachment id="12381847" name="82-v8.patch" size="711410" author="stack" created="Mon, 12 May 2008 00:07:14 +0000"/>
                            <attachment id="12381916" name="82-v9-ignore-ws.patch" size="720079" author="stack" created="Tue, 13 May 2008 00:55:11 +0000"/>
                            <attachment id="12381226" name="82.patch" size="232217" author="stack" created="Wed, 30 Apr 2008 22:58:01 +0000"/>
                            <attachment id="12381378" name="Perf.java" size="2059" author="stack" created="Sat, 3 May 2008 22:34:49 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 6 Dec 2007 20:12:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31678</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 32 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0h44f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>97930</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>