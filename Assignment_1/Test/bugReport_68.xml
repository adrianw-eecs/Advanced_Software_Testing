<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:40:42 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-68/HBASE-68.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-68] [hbase] HStoreFiles needlessly store the column family name in every entry</title>
                <link>https://issues.apache.org/jira/browse/HBASE-68</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Today, HStoreFiles keep the entire serialized HStoreKey objects around for every cell in the HStore. Since HStores are 1-1 with column families, this is really unnecessary - you can always surmise the column family by looking at the HStore it belongs to. (This information would ostensibly come from the file name or a header section.) This means that we could remove the column family part of the HStoreKeys we put into the HStoreFile, reducing the size of data stored. This would be a space-saving benefit, removing redundant data, and could be a speed benefit, as you have to scan over less data in memory and transfer less data over the network.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12385541">HBASE-68</key>
            <summary>[hbase] HStoreFiles needlessly store the column family name in every entry</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Not A Problem</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="bryanduxbury">Bryan Duxbury</reporter>
                        <labels>
                    </labels>
                <created>Fri, 4 Jan 2008 01:52:50 +0000</created>
                <updated>Sun, 8 Jun 2014 21:49:31 +0000</updated>
                            <resolved>Sun, 8 Jun 2014 21:49:31 +0000</resolved>
                                                                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12555778" author="jimk" created="Fri, 4 Jan 2008 03:36:00 +0000"  >&lt;p&gt;Remember that an HStoreKey contains both the family name and the member name. You could have entries for &apos;contents:&apos; (just the family name), &apos;contents:member1&apos;, &apos;contents:member2&apos;, etc., and they all get stored in the same HStoreFile.&lt;/p&gt;

&lt;p&gt;So unless you want to create a new object type to be the key, and then add the necessary logic to transform to/from HStoreKeys, I&apos;d say that trading off a little space for time is a benefit, not a fault.&lt;/p&gt;

&lt;p&gt;-1 on this proposal.&lt;/p&gt;</comment>
                            <comment id="12555997" author="bryanduxbury" created="Fri, 4 Jan 2008 17:39:10 +0000"  >&lt;p&gt;Jim, I am aware that multiple qualified cells show up in the same store file per row in the same HStoreFile. I&apos;m just suggesting that the part that comes before the qualified name is unnecessary.&lt;/p&gt;

&lt;p&gt;I understand that changing this would necessitate adding a new key type and transform logic, but I&apos;m not convinced that the translation would actually cost that much more time. You have to recognize that even though the data is precomputed, it is probably coming off of a disk on another computer through the network in 64MB blocks. I have to think that the added transmission time of all the redundant data in aggregate is at least as much as the added time it would take to do translation, and possibly more.&lt;/p&gt;</comment>
                            <comment id="12556258" author="jimk" created="Sat, 5 Jan 2008 17:00:21 +0000"  >&lt;p&gt;Point taken. However since we have done little to no performance analysis to date, I would say that this would be a premature optimization. Let&apos;s see where the hot spots are first and address them.&lt;/p&gt;</comment>
                            <comment id="12556302" author="stack" created="Sat, 5 Jan 2008 23:30:36 +0000"  >&lt;p&gt;Jim: I&apos;ve been profiling while you&apos;ve been on holidays.  Looks like most of the low-hanging fruit has been picked: e.g. RPC serializations and gratuitous object creations in hbase.  Apart from updates to memcache &amp;#8211; SortedMaps are &apos;expensive&apos; &amp;#8211; the bulk of our time/resources are now in appending and nexting over MapFiles/SequenceFiles whether updating, reading, compacting or flushing (The latter two take up the bulk of CPU during writes at least).   Anything we can do to improve our i/o story here will make for a win.&lt;/p&gt;

&lt;p&gt;As to dropping family name when we go to the fs, I like the idea, especially as its making keys (slightly) smaller... but yeah, lets measure first to see if these seemingly small savings even show up on the size/speed register.&lt;/p&gt;</comment>
                            <comment id="12728826" author="jimk" created="Wed, 8 Jul 2009 17:58:56 +0000"  >&lt;p&gt;Fixed with implementation of HFile&lt;/p&gt;</comment>
                            <comment id="12728828" author="stack" created="Wed, 8 Jul 2009 18:03:02 +0000"  >&lt;p&gt;Should we close this?  We still store family with every entry.&lt;/p&gt;</comment>
                            <comment id="12728830" author="jimk" created="Wed, 8 Jul 2009 18:04:42 +0000"  >&lt;p&gt;Oops! I thought we had changed that. Sorry.&lt;/p&gt;</comment>
                            <comment id="12728857" author="streamy" created="Wed, 8 Jul 2009 19:15:07 +0000"  >&lt;p&gt;Though not fixed/solved, I think we should close this issue as invalid.&lt;/p&gt;

&lt;p&gt;KVs must always contain their families because they are self-contained.  Moving forward if we ever do locality groups, we&apos;ll definitely need them.&lt;/p&gt;

&lt;p&gt;By making them self-contained, we never have to rewrite/reallocate the data.  ie. our zero-copy reads pass along KV references to the actual HFile block we read in.  Our Result is nothing but a List&amp;lt;KV&amp;gt; and we do not care whether they are all the same family or multiple families or whatever.  If our KV no longer stores the family we will have to undo the new optimizations (of not building a big Map as we build the Result) and start to track everything per family as we build the Result.&lt;/p&gt;

&lt;p&gt;All other issues outlined above like gratuitous object creations are also gone.  This optimization would only undo them.&lt;/p&gt;

&lt;p&gt;+1 here for closing issue&lt;/p&gt;</comment>
                            <comment id="12728868" author="bryanduxbury" created="Wed, 8 Jul 2009 19:49:52 +0000"  >&lt;p&gt;The idea of locality groups seems speculative, and clearly if we did that then this issue would be invalid from the get go. However, I don&apos;t see why KVs couldn&apos;t be reconstituted in part from the store file and part from the store file metadata when they are created, rather than writing that data to HDFS. Those values are actually constants, too, so each KV could just keep a reference to the constant object to use when writing in response to client requests. &lt;/p&gt;

&lt;p&gt;I think it would at least be interesting to measure the potential impact of this change. For people with lots of cells, lots of versions, or both, I could see this saving a substantial amount of disk and memory space.&lt;/p&gt;</comment>
                            <comment id="12728878" author="streamy" created="Wed, 8 Jul 2009 20:15:24 +0000"  >&lt;p&gt;Locality groups are something we should do.  But agree we can treat it separate from this issue as we are not doing it now.&lt;/p&gt;

&lt;p&gt;KVs can not be reconstituted without making every read copy all data twice.  We have to read blocks in from hdfs.  At that point, we can just pass the entire buffer along and make KV &quot;views&quot; against the big block.  Or, we could rewrite the block again reconstituting larger KVs.  That could be done when reading in, or when building results.  In either case, we are no longer zero-copy read.&lt;/p&gt;

&lt;p&gt;I don&apos;t see any way to do this without going backwards towards how things used to work... all the massive improvements we see are because of this consistent, explicit, and immutable KV.&lt;/p&gt;</comment>
                            <comment id="12729041" author="streamy" created="Thu, 9 Jul 2009 04:04:59 +0000"  >&lt;p&gt;Debates ensued on IRC.  Agreed to punt for now.&lt;/p&gt;

&lt;p&gt;One new idea discussed that we might explore is using codes instead of storing the entire string.  Client could rebuild by looking at HTD (which would contain the mapping from code -&amp;gt; family name), or we could send along a little header at the beginning of a Result.&lt;/p&gt;</comment>
                            <comment id="12729499" author="ryanobjc" created="Fri, 10 Jul 2009 02:41:18 +0000"  >&lt;p&gt;I give this issue a big -1 (or -2 or whatever).&lt;/p&gt;

&lt;p&gt;Right now we are &apos;needlessly&apos; storing column family... but in 0.21 I hope to be able to introduce locality groups, which will require us to have column family. &lt;/p&gt;

&lt;p&gt;Another thing is how we don&apos;t have to expand/patch up the reply during the regionserver processing of scan/get.   This helps quite a bit.  Even a code -&amp;gt; string translation would cost us.  And with a code-type of solution it would make things more brittle as we can&apos;t change and reorder these codes without invalidating an entire table.&lt;/p&gt;

&lt;p&gt;With block compression, and LZO, we get amazing compression... between 2-4x compressions I have seen with production data.  This helps mollify the on-disk storage cost of duplicating the column family.&lt;/p&gt;</comment>
                            <comment id="12729707" author="jimk" created="Fri, 10 Jul 2009 16:36:45 +0000"  >&lt;p&gt;+1 on closing this as &quot;won&apos;t fix&quot;&lt;/p&gt;</comment>
                            <comment id="12867042" author="stack" created="Thu, 13 May 2010 04:43:01 +0000"  >&lt;p&gt;Moved from 0.21 to 0.22 just after merge of old 0.20 branch into TRUNK.&lt;/p&gt;</comment>
                            <comment id="13047682" author="stack" created="Fri, 10 Jun 2011 22:58:19 +0000"  >&lt;p&gt;Moving out of 0.92.  Move it back in if you think differently.&lt;/p&gt;</comment>
                            <comment id="13047696" author="stack" created="Fri, 10 Jun 2011 22:58:22 +0000"  >&lt;p&gt;Moving out of 0.92.  Move it back in if you think differently.&lt;/p&gt;</comment>
                            <comment id="14021405" author="apurtell" created="Sun, 8 Jun 2014 21:49:31 +0000"  >&lt;p&gt;Use block encoding&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12386229">HBASE-61</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 4 Jan 2008 03:36:00 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31664</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 27 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02fqv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12152</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>